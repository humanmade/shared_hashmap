<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="15337"><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (7 samples, 0.05%)</title><rect x="0.0326%" y="341" width="0.0456%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="7"/><text x="0.2826%" y="351.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.03%)</title><rect x="0.0522%" y="325" width="0.0261%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="4"/><text x="0.3022%" y="335.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="0.0522%" y="309" width="0.0261%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="4"/><text x="0.3022%" y="319.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="0.0522%" y="293" width="0.0261%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="4"/><text x="0.3022%" y="303.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="0.0522%" y="277" width="0.0261%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="4"/><text x="0.3022%" y="287.50"></text></g><g><title>main-0278c81fe763950a`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.03%)</title><rect x="0.0522%" y="261" width="0.0261%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="4"/><text x="0.3022%" y="271.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::with_metadata_of (2 samples, 0.01%)</title><rect x="0.0848%" y="325" width="0.0130%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="2"/><text x="0.3348%" y="335.50"></text></g><g><title>main-0278c81fe763950a`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (3 samples, 0.02%)</title><rect x="0.1304%" y="277" width="0.0196%" height="15" fill="rgb(228,23,34)" fg:x="20" fg:w="3"/><text x="0.3804%" y="287.50"></text></g><g><title>main-0278c81fe763950a`bincode::serialized_size (10 samples, 0.07%)</title><rect x="0.1174%" y="309" width="0.0652%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="10"/><text x="0.3674%" y="319.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::serialized_size (9 samples, 0.06%)</title><rect x="0.1239%" y="293" width="0.0587%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="9"/><text x="0.3739%" y="303.50"></text></g><g><title>main-0278c81fe763950a`serde::ser::impls::_&lt;impl serde::ser::Serialize for i32&gt;::serialize (5 samples, 0.03%)</title><rect x="0.1500%" y="277" width="0.0326%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="5"/><text x="0.4000%" y="287.50"></text></g><g><title>main-0278c81fe763950a`&lt;&amp;mut bincode::ser::SizeChecker&lt;O&gt; as serde::ser::Serializer&gt;::serialize_i32 (5 samples, 0.03%)</title><rect x="0.1500%" y="261" width="0.0326%" height="15" fill="rgb(240,193,28)" fg:x="23" fg:w="5"/><text x="0.4000%" y="271.50"></text></g><g><title>main-0278c81fe763950a`bincode::ser::SizeChecker&lt;O&gt;::add_raw (4 samples, 0.03%)</title><rect x="0.1565%" y="245" width="0.0261%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="4"/><text x="0.4065%" y="255.50"></text></g><g><title>main-0278c81fe763950a`alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.01%)</title><rect x="0.2086%" y="261" width="0.0130%" height="15" fill="rgb(206,188,39)" fg:x="32" fg:w="2"/><text x="0.4586%" y="271.50"></text></g><g><title>main-0278c81fe763950a`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="0.2086%" y="245" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="32" fg:w="2"/><text x="0.4586%" y="255.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::serialize_into (3 samples, 0.02%)</title><rect x="0.2217%" y="261" width="0.0196%" height="15" fill="rgb(231,73,38)" fg:x="34" fg:w="3"/><text x="0.4717%" y="271.50"></text></g><g><title>main-0278c81fe763950a`serde::ser::impls::_&lt;impl serde::ser::Serialize for i32&gt;::serialize (2 samples, 0.01%)</title><rect x="0.2282%" y="245" width="0.0130%" height="15" fill="rgb(225,20,46)" fg:x="35" fg:w="2"/><text x="0.4782%" y="255.50"></text></g><g><title>main-0278c81fe763950a`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_i32 (2 samples, 0.01%)</title><rect x="0.2282%" y="229" width="0.0130%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="2"/><text x="0.4782%" y="239.50"></text></g><g><title>main-0278c81fe763950a`bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (2 samples, 0.01%)</title><rect x="0.2282%" y="213" width="0.0130%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="2"/><text x="0.4782%" y="223.50"></text></g><g><title>main-0278c81fe763950a`bincode::byteorder::WriteBytesExt::write_u32 (2 samples, 0.01%)</title><rect x="0.2282%" y="197" width="0.0130%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="2"/><text x="0.4782%" y="207.50"></text></g><g><title>main-0278c81fe763950a`std::io::impls::_&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.01%)</title><rect x="0.2282%" y="181" width="0.0130%" height="15" fill="rgb(249,33,26)" fg:x="35" fg:w="2"/><text x="0.4782%" y="191.50"></text></g><g><title>main-0278c81fe763950a`std::io::impls::_&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.01%)</title><rect x="0.2282%" y="165" width="0.0130%" height="15" fill="rgb(235,183,28)" fg:x="35" fg:w="2"/><text x="0.4782%" y="175.50"></text></g><g><title>main-0278c81fe763950a`bincode::serialize (10 samples, 0.07%)</title><rect x="0.1891%" y="293" width="0.0652%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="10"/><text x="0.4391%" y="303.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::serialize (9 samples, 0.06%)</title><rect x="0.1956%" y="277" width="0.0587%" height="15" fill="rgb(247,18,42)" fg:x="30" fg:w="9"/><text x="0.4456%" y="287.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::serialized_size (2 samples, 0.01%)</title><rect x="0.2412%" y="261" width="0.0130%" height="15" fill="rgb(241,131,45)" fg:x="37" fg:w="2"/><text x="0.4912%" y="271.50"></text></g><g><title>main-0278c81fe763950a`serde::ser::impls::_&lt;impl serde::ser::Serialize for i32&gt;::serialize (2 samples, 0.01%)</title><rect x="0.2412%" y="245" width="0.0130%" height="15" fill="rgb(249,31,29)" fg:x="37" fg:w="2"/><text x="0.4912%" y="255.50"></text></g><g><title>main-0278c81fe763950a`&lt;&amp;mut bincode::ser::SizeChecker&lt;O&gt; as serde::ser::Serializer&gt;::serialize_i32 (2 samples, 0.01%)</title><rect x="0.2412%" y="229" width="0.0130%" height="15" fill="rgb(225,111,53)" fg:x="37" fg:w="2"/><text x="0.4912%" y="239.50"></text></g><g><title>main-0278c81fe763950a`shared_hashmap::Bucket&lt;K,V&gt;::set_key (16 samples, 0.10%)</title><rect x="0.1826%" y="309" width="0.1043%" height="15" fill="rgb(238,160,17)" fg:x="28" fg:w="16"/><text x="0.4326%" y="319.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.03%)</title><rect x="0.2543%" y="293" width="0.0326%" height="15" fill="rgb(214,148,48)" fg:x="39" fg:w="5"/><text x="0.5043%" y="303.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.03%)</title><rect x="0.2543%" y="277" width="0.0326%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="5"/><text x="0.5043%" y="287.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="0.2543%" y="261" width="0.0326%" height="15" fill="rgb(209,103,24)" fg:x="39" fg:w="5"/><text x="0.5043%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="0.2869%" y="293" width="0.0130%" height="15" fill="rgb(229,88,8)" fg:x="44" fg:w="2"/><text x="0.5369%" y="303.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.2999%" y="293" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="46" fg:w="2"/><text x="0.5499%" y="303.50"></text></g><g><title>main-0278c81fe763950a`alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.04%)</title><rect x="0.3260%" y="261" width="0.0391%" height="15" fill="rgb(254,191,54)" fg:x="50" fg:w="6"/><text x="0.5760%" y="271.50"></text></g><g><title>main-0278c81fe763950a`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.04%)</title><rect x="0.3260%" y="245" width="0.0391%" height="15" fill="rgb(241,83,37)" fg:x="50" fg:w="6"/><text x="0.5760%" y="255.50"></text></g><g><title>main-0278c81fe763950a`core::alloc::layout::Layout::array::inner (2 samples, 0.01%)</title><rect x="0.3521%" y="229" width="0.0130%" height="15" fill="rgb(233,36,39)" fg:x="54" fg:w="2"/><text x="0.6021%" y="239.50"></text></g><g><title>main-0278c81fe763950a`alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="0.3782%" y="117" width="0.0196%" height="15" fill="rgb(226,3,54)" fg:x="58" fg:w="3"/><text x="0.6282%" y="127.50"></text></g><g><title>main-0278c81fe763950a`bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u64 (5 samples, 0.03%)</title><rect x="0.3717%" y="213" width="0.0326%" height="15" fill="rgb(245,192,40)" fg:x="57" fg:w="5"/><text x="0.6217%" y="223.50"></text></g><g><title>main-0278c81fe763950a`bincode::byteorder::WriteBytesExt::write_u64 (5 samples, 0.03%)</title><rect x="0.3717%" y="197" width="0.0326%" height="15" fill="rgb(238,167,29)" fg:x="57" fg:w="5"/><text x="0.6217%" y="207.50"></text></g><g><title>main-0278c81fe763950a`std::io::impls::_&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.03%)</title><rect x="0.3717%" y="181" width="0.0326%" height="15" fill="rgb(232,182,51)" fg:x="57" fg:w="5"/><text x="0.6217%" y="191.50"></text></g><g><title>main-0278c81fe763950a`std::io::impls::_&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (5 samples, 0.03%)</title><rect x="0.3717%" y="165" width="0.0326%" height="15" fill="rgb(231,60,39)" fg:x="57" fg:w="5"/><text x="0.6217%" y="175.50"></text></g><g><title>main-0278c81fe763950a`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.03%)</title><rect x="0.3717%" y="149" width="0.0326%" height="15" fill="rgb(208,69,12)" fg:x="57" fg:w="5"/><text x="0.6217%" y="159.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.03%)</title><rect x="0.3782%" y="133" width="0.0261%" height="15" fill="rgb(235,93,37)" fg:x="58" fg:w="4"/><text x="0.6282%" y="143.50"></text></g><g><title>main-0278c81fe763950a`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_str (11 samples, 0.07%)</title><rect x="0.3717%" y="229" width="0.0717%" height="15" fill="rgb(213,116,39)" fg:x="57" fg:w="11"/><text x="0.6217%" y="239.50"></text></g><g><title>main-0278c81fe763950a`std::io::impls::_&lt;impl std::io::Write for &amp;mut W&gt;::write_all (6 samples, 0.04%)</title><rect x="0.4043%" y="213" width="0.0391%" height="15" fill="rgb(222,207,29)" fg:x="62" fg:w="6"/><text x="0.6543%" y="223.50"></text></g><g><title>main-0278c81fe763950a`std::io::impls::_&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (5 samples, 0.03%)</title><rect x="0.4108%" y="197" width="0.0326%" height="15" fill="rgb(206,96,30)" fg:x="63" fg:w="5"/><text x="0.6608%" y="207.50"></text></g><g><title>main-0278c81fe763950a`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.03%)</title><rect x="0.4108%" y="181" width="0.0326%" height="15" fill="rgb(218,138,4)" fg:x="63" fg:w="5"/><text x="0.6608%" y="191.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.03%)</title><rect x="0.4173%" y="165" width="0.0261%" height="15" fill="rgb(250,191,14)" fg:x="64" fg:w="4"/><text x="0.6673%" y="175.50"></text></g><g><title>main-0278c81fe763950a`core::slice::iter::Iter&lt;T&gt;::as_slice (3 samples, 0.02%)</title><rect x="0.4238%" y="149" width="0.0196%" height="15" fill="rgb(239,60,40)" fg:x="65" fg:w="3"/><text x="0.6738%" y="159.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::serialize_into (14 samples, 0.09%)</title><rect x="0.3651%" y="261" width="0.0913%" height="15" fill="rgb(206,27,48)" fg:x="56" fg:w="14"/><text x="0.6151%" y="271.50"></text></g><g><title>main-0278c81fe763950a`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (14 samples, 0.09%)</title><rect x="0.3651%" y="245" width="0.0913%" height="15" fill="rgb(225,35,8)" fg:x="56" fg:w="14"/><text x="0.6151%" y="255.50"></text></g><g><title>main-0278c81fe763950a`bincode::serialize (26 samples, 0.17%)</title><rect x="0.3130%" y="293" width="0.1695%" height="15" fill="rgb(250,213,24)" fg:x="48" fg:w="26"/><text x="0.5630%" y="303.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::serialize (26 samples, 0.17%)</title><rect x="0.3130%" y="277" width="0.1695%" height="15" fill="rgb(247,123,22)" fg:x="48" fg:w="26"/><text x="0.5630%" y="287.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::serialized_size (4 samples, 0.03%)</title><rect x="0.4564%" y="261" width="0.0261%" height="15" fill="rgb(231,138,38)" fg:x="70" fg:w="4"/><text x="0.7064%" y="271.50"></text></g><g><title>main-0278c81fe763950a`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (4 samples, 0.03%)</title><rect x="0.4564%" y="245" width="0.0261%" height="15" fill="rgb(231,145,46)" fg:x="70" fg:w="4"/><text x="0.7064%" y="255.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="0.4629%" y="229" width="0.0196%" height="15" fill="rgb(251,118,11)" fg:x="71" fg:w="3"/><text x="0.7129%" y="239.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.03%)</title><rect x="0.4825%" y="293" width="0.0261%" height="15" fill="rgb(217,147,25)" fg:x="74" fg:w="4"/><text x="0.7325%" y="303.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="0.4825%" y="277" width="0.0261%" height="15" fill="rgb(247,81,37)" fg:x="74" fg:w="4"/><text x="0.7325%" y="287.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="0.4825%" y="261" width="0.0261%" height="15" fill="rgb(209,12,38)" fg:x="74" fg:w="4"/><text x="0.7325%" y="271.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="0.4825%" y="245" width="0.0261%" height="15" fill="rgb(227,1,9)" fg:x="74" fg:w="4"/><text x="0.7325%" y="255.50"></text></g><g><title>main-0278c81fe763950a`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.02%)</title><rect x="0.4890%" y="229" width="0.0196%" height="15" fill="rgb(248,47,43)" fg:x="75" fg:w="3"/><text x="0.7390%" y="239.50"></text></g><g><title>main-0278c81fe763950a`shared_hashmap::Bucket&lt;K,V&gt;::set_value (36 samples, 0.23%)</title><rect x="0.2869%" y="309" width="0.2347%" height="15" fill="rgb(221,10,30)" fg:x="44" fg:w="36"/><text x="0.5369%" y="319.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.01%)</title><rect x="0.5086%" y="293" width="0.0130%" height="15" fill="rgb(210,229,1)" fg:x="78" fg:w="2"/><text x="0.7586%" y="303.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.01%)</title><rect x="0.5086%" y="277" width="0.0130%" height="15" fill="rgb(222,148,37)" fg:x="78" fg:w="2"/><text x="0.7586%" y="287.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.5086%" y="261" width="0.0130%" height="15" fill="rgb(234,67,33)" fg:x="78" fg:w="2"/><text x="0.7586%" y="271.50"></text></g><g><title>main-0278c81fe763950a`bincode::byteorder::ReadBytesExt::read_u32 (6 samples, 0.04%)</title><rect x="0.5607%" y="165" width="0.0391%" height="15" fill="rgb(247,98,35)" fg:x="86" fg:w="6"/><text x="0.8107%" y="175.50"></text></g><g><title>main-0278c81fe763950a`core::slice::_&lt;impl [T]&gt;::split_at_unchecked (3 samples, 0.02%)</title><rect x="0.5803%" y="149" width="0.0196%" height="15" fill="rgb(247,138,52)" fg:x="89" fg:w="3"/><text x="0.8303%" y="159.50"></text></g><g><title>main-0278c81fe763950a`shared_hashmap::Bucket&lt;K,V&gt;::get_key (13 samples, 0.08%)</title><rect x="0.5216%" y="293" width="0.0848%" height="15" fill="rgb(213,79,30)" fg:x="80" fg:w="13"/><text x="0.7716%" y="303.50"></text></g><g><title>main-0278c81fe763950a`bincode::deserialize (13 samples, 0.08%)</title><rect x="0.5216%" y="277" width="0.0848%" height="15" fill="rgb(246,177,23)" fg:x="80" fg:w="13"/><text x="0.7716%" y="287.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::deserialize (11 samples, 0.07%)</title><rect x="0.5347%" y="261" width="0.0717%" height="15" fill="rgb(230,62,27)" fg:x="82" fg:w="11"/><text x="0.7847%" y="271.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::deserialize_seed (9 samples, 0.06%)</title><rect x="0.5477%" y="245" width="0.0587%" height="15" fill="rgb(216,154,8)" fg:x="84" fg:w="9"/><text x="0.7977%" y="255.50"></text></g><g><title>main-0278c81fe763950a`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.05%)</title><rect x="0.5607%" y="229" width="0.0456%" height="15" fill="rgb(244,35,45)" fg:x="86" fg:w="7"/><text x="0.8107%" y="239.50"></text></g><g><title>main-0278c81fe763950a`serde::de::impls::_&lt;impl serde::de::Deserialize for i32&gt;::deserialize (7 samples, 0.05%)</title><rect x="0.5607%" y="213" width="0.0456%" height="15" fill="rgb(251,115,12)" fg:x="86" fg:w="7"/><text x="0.8107%" y="223.50"></text></g><g><title>main-0278c81fe763950a`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_i32 (7 samples, 0.05%)</title><rect x="0.5607%" y="197" width="0.0456%" height="15" fill="rgb(240,54,50)" fg:x="86" fg:w="7"/><text x="0.8107%" y="207.50"></text></g><g><title>main-0278c81fe763950a`bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (7 samples, 0.05%)</title><rect x="0.5607%" y="181" width="0.0456%" height="15" fill="rgb(233,84,52)" fg:x="86" fg:w="7"/><text x="0.8107%" y="191.50"></text></g><g><title>main-0278c81fe763950a`core::ptr::const_ptr::_&lt;impl *const T&gt;::with_metadata_of (927 samples, 6.04%)</title><rect x="24.5028%" y="261" width="6.0442%" height="15" fill="rgb(207,117,47)" fg:x="3758" fg:w="927"/><text x="24.7528%" y="271.50">main-027..</text></g><g><title>main-0278c81fe763950a`&lt;shared_hashmap::SharedMemoryHashMapBucketIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,636 samples, 30.23%)</title><rect x="14.2075%" y="277" width="30.2276%" height="15" fill="rgb(249,43,39)" fg:x="2179" fg:w="4636"/><text x="14.4575%" y="287.50">main-0278c81fe763950a`&lt;shared_hashmap::SharedMemo..</text></g><g><title>main-0278c81fe763950a`shared_hashmap::Bucket&lt;K,V&gt;::next (2,130 samples, 13.89%)</title><rect x="30.5470%" y="261" width="13.8880%" height="15" fill="rgb(209,38,44)" fg:x="4685" fg:w="2130"/><text x="30.7970%" y="271.50">main-0278c81fe763950a..</text></g><g><title>main-0278c81fe763950a`&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1,947 samples, 12.69%)</title><rect x="56.4191%" y="245" width="12.6948%" height="15" fill="rgb(236,212,23)" fg:x="8653" fg:w="1947"/><text x="56.6691%" y="255.50">main-0278c81fe76395..</text></g><g><title>main-0278c81fe763950a`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (2,494 samples, 16.26%)</title><rect x="69.1139%" y="245" width="16.2613%" height="15" fill="rgb(242,79,21)" fg:x="10600" fg:w="2494"/><text x="69.3639%" y="255.50">main-0278c81fe763950a`cor..</text></g><g><title>main-0278c81fe763950a`core::cmp::PartialOrd::lt (6,653 samples, 43.38%)</title><rect x="44.4350%" y="277" width="43.3788%" height="15" fill="rgb(211,96,35)" fg:x="6815" fg:w="6653"/><text x="44.6850%" y="287.50">main-0278c81fe763950a`core::cmp::PartialOrd::lt</text></g><g><title>main-0278c81fe763950a`&lt;std::time::Instant as core::cmp::PartialOrd&gt;::partial_cmp (5,301 samples, 34.56%)</title><rect x="53.2503%" y="261" width="34.5635%" height="15" fill="rgb(253,215,40)" fg:x="8167" fg:w="5301"/><text x="53.5003%" y="271.50">main-0278c81fe763950a`&lt;std::time::Instant as core::cmp::..</text></g><g><title>main-0278c81fe763950a`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for u32&gt;::partial_cmp (374 samples, 2.44%)</title><rect x="85.3752%" y="245" width="2.4385%" height="15" fill="rgb(211,81,21)" fg:x="13094" fg:w="374"/><text x="85.6252%" y="255.50">ma..</text></g><g><title>main-0278c81fe763950a`shared_hashmap::SharedMemoryContents&lt;K,V&gt;::get_lru (13,375 samples, 87.21%)</title><rect x="0.6129%" y="293" width="87.2074%" height="15" fill="rgb(208,190,38)" fg:x="94" fg:w="13375"/><text x="0.8629%" y="303.50">main-0278c81fe763950a`shared_hashmap::SharedMemoryContents&lt;K,V&gt;::get_lru</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,822 samples, 11.88%)</title><rect x="87.8333%" y="277" width="11.8798%" height="15" fill="rgb(235,213,38)" fg:x="13471" fg:w="1822"/><text x="88.0833%" y="287.50">libsystem_platform..</text></g><g><title>main-0278c81fe763950a`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_i32 (2 samples, 0.01%)</title><rect x="99.7457%" y="181" width="0.0130%" height="15" fill="rgb(237,122,38)" fg:x="15298" fg:w="2"/><text x="99.9957%" y="191.50"></text></g><g><title>main-0278c81fe763950a`shared_hashmap::Bucket&lt;K,V&gt;::get_key (7 samples, 0.05%)</title><rect x="99.7196%" y="277" width="0.0456%" height="15" fill="rgb(244,218,35)" fg:x="15294" fg:w="7"/><text x="99.9696%" y="287.50"></text></g><g><title>main-0278c81fe763950a`bincode::deserialize (7 samples, 0.05%)</title><rect x="99.7196%" y="261" width="0.0456%" height="15" fill="rgb(240,68,47)" fg:x="15294" fg:w="7"/><text x="99.9696%" y="271.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::deserialize (7 samples, 0.05%)</title><rect x="99.7196%" y="245" width="0.0456%" height="15" fill="rgb(210,16,53)" fg:x="15294" fg:w="7"/><text x="99.9696%" y="255.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::deserialize_seed (6 samples, 0.04%)</title><rect x="99.7262%" y="229" width="0.0391%" height="15" fill="rgb(235,124,12)" fg:x="15295" fg:w="6"/><text x="99.9762%" y="239.50"></text></g><g><title>main-0278c81fe763950a`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.02%)</title><rect x="99.7457%" y="213" width="0.0196%" height="15" fill="rgb(224,169,11)" fg:x="15298" fg:w="3"/><text x="99.9957%" y="223.50"></text></g><g><title>main-0278c81fe763950a`serde::de::impls::_&lt;impl serde::de::Deserialize for i32&gt;::deserialize (3 samples, 0.02%)</title><rect x="99.7457%" y="197" width="0.0196%" height="15" fill="rgb(250,166,2)" fg:x="15298" fg:w="3"/><text x="99.9957%" y="207.50"></text></g><g><title>main-0278c81fe763950a`bincode::byteorder::ReadBytesExt::read_u64 (3 samples, 0.02%)</title><rect x="99.7979%" y="117" width="0.0196%" height="15" fill="rgb(242,216,29)" fg:x="15306" fg:w="3"/><text x="100.0479%" y="127.50"></text></g><g><title>main-0278c81fe763950a`core::slice::_&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.01%)</title><rect x="99.8044%" y="101" width="0.0130%" height="15" fill="rgb(230,116,27)" fg:x="15307" fg:w="2"/><text x="100.0544%" y="111.50"></text></g><g><title>main-0278c81fe763950a`bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (4 samples, 0.03%)</title><rect x="99.7979%" y="133" width="0.0261%" height="15" fill="rgb(228,99,48)" fg:x="15306" fg:w="4"/><text x="100.0479%" y="143.50"></text></g><g><title>main-0278c81fe763950a`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="99.8435%" y="53" width="0.0130%" height="15" fill="rgb(253,11,6)" fg:x="15313" fg:w="2"/><text x="100.0935%" y="63.50"></text></g><g><title>main-0278c81fe763950a`alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="99.8435%" y="37" width="0.0130%" height="15" fill="rgb(247,143,39)" fg:x="15313" fg:w="2"/><text x="100.0935%" y="47.50"></text></g><g><title>main-0278c81fe763950a`core::result::Result&lt;T,E&gt;::map (6 samples, 0.04%)</title><rect x="99.8240%" y="133" width="0.0391%" height="15" fill="rgb(236,97,10)" fg:x="15310" fg:w="6"/><text x="100.0740%" y="143.50"></text></g><g><title>main-0278c81fe763950a`&lt;bincode::de::read::SliceReader as bincode::de::read::BincodeRead&gt;::get_byte_buffer::_{{closure}} (6 samples, 0.04%)</title><rect x="99.8240%" y="117" width="0.0391%" height="15" fill="rgb(233,208,19)" fg:x="15310" fg:w="6"/><text x="100.0740%" y="127.50"></text></g><g><title>main-0278c81fe763950a`alloc::slice::_&lt;impl [T]&gt;::to_vec (5 samples, 0.03%)</title><rect x="99.8305%" y="101" width="0.0326%" height="15" fill="rgb(216,164,2)" fg:x="15311" fg:w="5"/><text x="100.0805%" y="111.50"></text></g><g><title>main-0278c81fe763950a`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.03%)</title><rect x="99.8305%" y="85" width="0.0326%" height="15" fill="rgb(220,129,5)" fg:x="15311" fg:w="5"/><text x="100.0805%" y="95.50"></text></g><g><title>main-0278c81fe763950a`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.03%)</title><rect x="99.8305%" y="69" width="0.0326%" height="15" fill="rgb(242,17,10)" fg:x="15311" fg:w="5"/><text x="100.0805%" y="79.50"></text></g><g><title>main-0278c81fe763950a`bincode::de::Deserializer&lt;R,O&gt;::read_vec (12 samples, 0.08%)</title><rect x="99.7914%" y="149" width="0.0782%" height="15" fill="rgb(242,107,0)" fg:x="15305" fg:w="12"/><text x="100.0414%" y="159.50"></text></g><g><title>main-0278c81fe763950a`bincode::deserialize (17 samples, 0.11%)</title><rect x="99.7653%" y="261" width="0.1108%" height="15" fill="rgb(251,28,31)" fg:x="15301" fg:w="17"/><text x="100.0153%" y="271.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::deserialize (17 samples, 0.11%)</title><rect x="99.7653%" y="245" width="0.1108%" height="15" fill="rgb(233,223,10)" fg:x="15301" fg:w="17"/><text x="100.0153%" y="255.50"></text></g><g><title>main-0278c81fe763950a`bincode::internal::deserialize_seed (16 samples, 0.10%)</title><rect x="99.7718%" y="229" width="0.1043%" height="15" fill="rgb(215,21,27)" fg:x="15302" fg:w="16"/><text x="100.0218%" y="239.50"></text></g><g><title>main-0278c81fe763950a`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.10%)</title><rect x="99.7783%" y="213" width="0.0978%" height="15" fill="rgb(232,23,21)" fg:x="15303" fg:w="15"/><text x="100.0283%" y="223.50"></text></g><g><title>main-0278c81fe763950a`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (15 samples, 0.10%)</title><rect x="99.7783%" y="197" width="0.0978%" height="15" fill="rgb(244,5,23)" fg:x="15303" fg:w="15"/><text x="100.0283%" y="207.50"></text></g><g><title>main-0278c81fe763950a`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (15 samples, 0.10%)</title><rect x="99.7783%" y="181" width="0.0978%" height="15" fill="rgb(226,81,46)" fg:x="15303" fg:w="15"/><text x="100.0283%" y="191.50"></text></g><g><title>main-0278c81fe763950a`bincode::de::Deserializer&lt;R,O&gt;::read_string (15 samples, 0.10%)</title><rect x="99.7783%" y="165" width="0.0978%" height="15" fill="rgb(247,70,30)" fg:x="15303" fg:w="15"/><text x="100.0283%" y="175.50"></text></g><g><title>main-0278c81fe763950a`shared_hashmap::SharedMemoryContents&lt;K,V&gt;::evict (15,239 samples, 99.36%)</title><rect x="0.5216%" y="309" width="99.3610%" height="15" fill="rgb(212,68,19)" fg:x="80" fg:w="15239"/><text x="0.7716%" y="319.50">main-0278c81fe763950a`shared_hashmap::SharedMemoryContents&lt;K,V&gt;::evict</text></g><g><title>main-0278c81fe763950a`shared_hashmap::SharedMemoryContents&lt;K,V&gt;::remove (1,850 samples, 12.06%)</title><rect x="87.8203%" y="293" width="12.0623%" height="15" fill="rgb(240,187,13)" fg:x="13469" fg:w="1850"/><text x="88.0703%" y="303.50">main-0278c81fe7639..</text></g><g><title>main-0278c81fe763950a`shared_hashmap::Bucket&lt;K,V&gt;::get_value (18 samples, 0.12%)</title><rect x="99.7653%" y="277" width="0.1174%" height="15" fill="rgb(223,113,26)" fg:x="15301" fg:w="18"/><text x="100.0153%" y="287.50"></text></g><g><title>main-0278c81fe763950a`std::sys_common::backtrace::__rust_begin_short_backtrace (15,333 samples, 99.97%)</title><rect x="0.0130%" y="437" width="99.9739%" height="15" fill="rgb(206,192,2)" fg:x="2" fg:w="15333"/><text x="0.2630%" y="447.50">main-0278c81fe763950a`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>main-0278c81fe763950a`test::run_test::run_test_inner::_{{closure}} (15,333 samples, 99.97%)</title><rect x="0.0130%" y="421" width="99.9739%" height="15" fill="rgb(241,108,4)" fg:x="2" fg:w="15333"/><text x="0.2630%" y="431.50">main-0278c81fe763950a`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>main-0278c81fe763950a`test::__rust_begin_short_backtrace (15,333 samples, 99.97%)</title><rect x="0.0130%" y="405" width="99.9739%" height="15" fill="rgb(247,173,49)" fg:x="2" fg:w="15333"/><text x="0.2630%" y="415.50">main-0278c81fe763950a`test::__rust_begin_short_backtrace</text></g><g><title>main-0278c81fe763950a`core::ops::function::FnOnce::call_once (15,333 samples, 99.97%)</title><rect x="0.0130%" y="389" width="99.9739%" height="15" fill="rgb(224,114,35)" fg:x="2" fg:w="15333"/><text x="0.2630%" y="399.50">main-0278c81fe763950a`core::ops::function::FnOnce::call_once</text></g><g><title>main-0278c81fe763950a`main::test_lru_evicted::_{{closure}} (15,332 samples, 99.97%)</title><rect x="0.0196%" y="373" width="99.9674%" height="15" fill="rgb(245,159,27)" fg:x="3" fg:w="15332"/><text x="0.2696%" y="383.50">main-0278c81fe763950a`main::test_lru_evicted::_{{closure}}</text></g><g><title>main-0278c81fe763950a`main::test_lru_evicted (15,332 samples, 99.97%)</title><rect x="0.0196%" y="357" width="99.9674%" height="15" fill="rgb(245,172,44)" fg:x="3" fg:w="15332"/><text x="0.2696%" y="367.50">main-0278c81fe763950a`main::test_lru_evicted</text></g><g><title>main-0278c81fe763950a`shared_hashmap::SharedMemoryHashMap&lt;K,V&gt;::try_insert (15,323 samples, 99.91%)</title><rect x="0.0782%" y="341" width="99.9087%" height="15" fill="rgb(236,23,11)" fg:x="12" fg:w="15323"/><text x="0.3282%" y="351.50">main-0278c81fe763950a`shared_hashmap::SharedMemoryHashMap&lt;K,V&gt;::try_insert</text></g><g><title>main-0278c81fe763950a`shared_hashmap::SharedMemoryContents&lt;K,V&gt;::try_insert (15,320 samples, 99.89%)</title><rect x="0.0978%" y="325" width="99.8892%" height="15" fill="rgb(205,117,38)" fg:x="15" fg:w="15320"/><text x="0.3478%" y="335.50">main-0278c81fe763950a`shared_hashmap::SharedMemoryContents&lt;K,V&gt;::try_insert</text></g><g><title>main-0278c81fe763950a`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (16 samples, 0.10%)</title><rect x="99.8826%" y="309" width="0.1043%" height="15" fill="rgb(237,72,25)" fg:x="15319" fg:w="16"/><text x="100.1326%" y="319.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (16 samples, 0.10%)</title><rect x="99.8826%" y="293" width="0.1043%" height="15" fill="rgb(244,70,9)" fg:x="15319" fg:w="16"/><text x="100.1326%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (15 samples, 0.10%)</title><rect x="99.8892%" y="277" width="0.0978%" height="15" fill="rgb(217,125,39)" fg:x="15320" fg:w="15"/><text x="100.1392%" y="287.50"></text></g><g><title>all (15,337 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="15337"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (15,336 samples, 99.99%)</title><rect x="0.0065%" y="501" width="99.9935%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="15336"/><text x="0.2565%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (15,336 samples, 99.99%)</title><rect x="0.0065%" y="485" width="99.9935%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="15336"/><text x="0.2565%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>main-0278c81fe763950a`std::sys::unix::thread::Thread::new::thread_start (15,335 samples, 99.99%)</title><rect x="0.0130%" y="469" width="99.9870%" height="15" fill="rgb(238,131,9)" fg:x="2" fg:w="15335"/><text x="0.2630%" y="479.50">main-0278c81fe763950a`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>main-0278c81fe763950a`core::ops::function::FnOnce::call_once{{vtable.shim}} (15,335 samples, 99.99%)</title><rect x="0.0130%" y="453" width="99.9870%" height="15" fill="rgb(211,50,8)" fg:x="2" fg:w="15335"/><text x="0.2630%" y="463.50">main-0278c81fe763950a`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>main-0278c81fe763950a`std::thread::Builder::spawn_unchecked_::_{{closure}} (2 samples, 0.01%)</title><rect x="99.9870%" y="437" width="0.0130%" height="15" fill="rgb(245,182,24)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="447.50"></text></g><g><title>main-0278c81fe763950a`std::panic::catch_unwind (2 samples, 0.01%)</title><rect x="99.9870%" y="421" width="0.0130%" height="15" fill="rgb(242,14,37)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="431.50"></text></g><g><title>main-0278c81fe763950a`std::panicking::try (2 samples, 0.01%)</title><rect x="99.9870%" y="405" width="0.0130%" height="15" fill="rgb(246,228,12)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="415.50"></text></g><g><title>main-0278c81fe763950a`__rust_try (2 samples, 0.01%)</title><rect x="99.9870%" y="389" width="0.0130%" height="15" fill="rgb(213,55,15)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="399.50"></text></g><g><title>main-0278c81fe763950a`std::panicking::try::do_call (2 samples, 0.01%)</title><rect x="99.9870%" y="373" width="0.0130%" height="15" fill="rgb(209,9,3)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="383.50"></text></g><g><title>main-0278c81fe763950a`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="99.9870%" y="357" width="0.0130%" height="15" fill="rgb(230,59,30)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="367.50"></text></g><g><title>main-0278c81fe763950a`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (2 samples, 0.01%)</title><rect x="99.9870%" y="341" width="0.0130%" height="15" fill="rgb(209,121,21)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="351.50"></text></g><g><title>main-0278c81fe763950a`std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.01%)</title><rect x="99.9870%" y="325" width="0.0130%" height="15" fill="rgb(220,109,13)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="335.50"></text></g><g><title>main-0278c81fe763950a`main::test_race_condition::_{{closure}} (2 samples, 0.01%)</title><rect x="99.9870%" y="309" width="0.0130%" height="15" fill="rgb(232,18,1)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="319.50"></text></g><g><title>main-0278c81fe763950a`shared_hashmap::SharedMemoryHashMap&lt;K,V&gt;::try_insert (2 samples, 0.01%)</title><rect x="99.9870%" y="293" width="0.0130%" height="15" fill="rgb(215,41,42)" fg:x="15335" fg:w="2"/><text x="100.2370%" y="303.50"></text></g></svg></svg>